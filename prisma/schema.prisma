// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String       @id @default(uuid())
  email                 String       @unique
  password              String
  providerName          Provider?
  name                  String?
  lastName              String?
  isSuperAdmin          Boolean      @default(false)
  bio                   String?
  audience              Int          @default(0)
  pictureId             String?
  providerId            String?
  timezone              Int          @default(0)
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  lastReadNotifications DateTime?
  inviteId              String?
  activated             Boolean      @default(false)
  lastOnline            DateTime     @updatedAt
  organization          Organization @relation(fields: [organizationId], references: [id])
  organizationId        String
}

model Integration {
  id                 String       @id @default(uuid())
  internalId         String?
  name               String
  picture            String
  providerIdentifier String
  type               String
  token              String
  disabled           Boolean      @default(false)
  tokenExpiration    DateTime
  refreshToken       String?
  profile            String?
  deletedAt          DateTime?
  createdAt          DateTime     @default(now())
  inBetweenSteps     Boolean      @default(false)
  refreshNeeded      Boolean      @default(false)
  organization       Organization @relation(fields: [organizationId], references: [id])
  organizationId     String
  posts              Post[]
}

model Organization {
  id           String        @id @default(uuid())
  name         String
  description  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  integrations Integration[]
  posts        Post[]
  media        Media[]
  users        User[]
}

// model UserOrganization {
//   id             String   @id @default(uuid())
//   disabled       Boolean  @default(false)
//   role           Role
//   createdAt      DateTime @default(now())
//   updatedAt      DateTime @updatedAt
//   userId         String
//   organizationId String
// }

model Media {
  id             String       @id @default(uuid())
  name           String
  path           String
  fileType       String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
}

model Post {
  id             String                    @id @default(uuid())
  state          String
  content        String
  group          String?
  title          String?
  description    String?
  releaseId      String?
  releaseUrl     String?
  settings       String?
  image          String?
  video          String?
  approval       APPROVED_SUBMIT_FOR_ORDER
  publishDate    DateTime                  @default(now())
  createdAt      DateTime                  @default(now())
  updatedAt      DateTime                  @updatedAt
  deletedAt      DateTime                  @updatedAt
  organization   Organization              @relation(fields: [organizationId], references: [id])
  organizationId String
  integration    Integration               @relation(fields: [integrationId], references: [id])
  integrationId  String
  tags           Tag[]
}

model Tag {
  id    String @id @default(uuid())
  posts Post[]
}

enum Provider {
  LOCAL
  GOOGLE
  GITHUB
}

enum Role {
  SUPERADMIN
  ADMIN
  USER
}

enum APPROVED_SUBMIT_FOR_ORDER {
  NO
  AWAITING_CONFIRMATION
  YES
}
